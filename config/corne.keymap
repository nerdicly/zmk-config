/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    quick-release;
    release-after-ms = <500>;
};

&lt {
    tapping-term-ms = <350>;
    quick-tap-ms = <190>;
    require-prior-idle-ms = <125>;
    flavor = "balanced";
};

&num_word { continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL LSHFT>; };

/ {
    combos {
        compatible = "zmk,combos";

        qwerty {
            bindings = <&to 1>;
            key-positions = <38 16>;
            layers = <0>;
        };

        colemak {
            bindings = <&to 0>;
            key-positions = <38 16>;
            layers = <1>;
        };

        screenshot {
            bindings = <&kp LS(LG(S))>;
            key-positions = <37 15>;
        };

        explorer {
            bindings = <&kp LG(E)>;
            key-positions = <37 16>;
        };

        context-menu {
            bindings = <&kp K_CONTEXT_MENU>;
            key-positions = <37 17>;
        };

        lock {
            bindings = <&kp LG(L)>;
            key-positions = <12 0>;
        };

        numword {
            bindings = <&num_word 4>;
            key-positions = <15 16>;
            require-prior-idle-ms = <200>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 28>;
            require-prior-idle-ms = <200>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
            require-prior-idle-ms = <200>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
            require-prior-idle-ms = <200>;
        };

        selectAll {
            bindings = <&kp LC(A)>;
            key-positions = <25 28>;
            require-prior-idle-ms = <200>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <3 4>;
            require-prior-idle-ms = <200>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <2 3>;
            require-prior-idle-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp F         &kp P           &kp B          &kp J     &kp L   &kp U         &kp Y    &kp SEMI  &kp DEL
&sk LSHFT  &kp A  &kp R  &kp S         &kp T           &kp G          &kp M     &kp N   &kp E         &kp I    &kp O     &kp MINUS
&kp LCTRL  &kp Z  &kp X  &kp C         &kp D           &kp V          &kp K     &kp H   &kp COMMA     &kp DOT  &kp FSLH  &kp SQT
                         &kp LEFT_ALT  &lt 2 LEFT_GUI  &lt 4 SPACE    &kp BSPC  &trans  &lt 3 ESCAPE
            >;

            label = "colemak";
        };

        qwerty {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R           &kp T          &kp Y     &kp U   &kp I         &kp O    &kp SEMI  &kp DEL
&sk LSHFT  &kp A  &kp S  &kp D         &kp F           &kp G          &kp H     &kp J   &kp K         &kp L    &kp P     &kp MINUS
&kp LCTRL  &kp Z  &kp X  &kp C         &kp V           &kp B          &kp N     &kp M   &kp COMMA     &kp DOT  &kp FSLH  &kp SQT
                         &kp LEFT_ALT  &lt 2 LEFT_GUI  &lt 4 SPACE    &kp BSPC  &trans  &lt 3 ESCAPE
            >;

            label = "qwerty";
        };

        navnum {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp CAPSLOCK   &trans     &kp LS(LC(Z))   &kp UP_ARROW    &kp F2           &kp F5       &trans          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR
&kp BACKSPACE  &kp LC(Z)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(S)    &kp LEFT_SHIFT  &trans        &trans        &trans        &trans        &trans
&bootloader    &trans     &trans          &trans          &caps_word       &trans       &trans          &trans        &trans        &trans        &trans        &bootloader
                                          &trans          &trans           &trans       &kp C_NEXT      &trans        &trans
            >;

            label = "navnum";
        };

        symbol {
            bindings = <
&trans  &trans           &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSLASH  &kp GRAVE    &kp AMPERSAND  &trans      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans       &trans
&trans  &kp EXCLAMATION  &kp MINUS      &kp PLUS          &kp EQUAL      &kp POUND    &kp PIPE       &kp COLON   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT  &trans
&trans  &trans           &kp SLASH      &kp ASTERISK      &kp CARET      &trans       &kp TILDE      &kp DOLLAR  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans       &trans
                                        &trans            &trans         &trans       &trans         &trans      &trans
            >;

            label = "symbol";
        };

        num {
            bindings = <
&trans  &kp MINUS  &kp N7  &kp N8  &kp N9  &kp PLUS     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N0     &kp N4  &kp N5  &kp N6  &kp EQUAL    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp SLASH  &kp N1  &kp N2  &kp N3  &kp ASTRK    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans       &trans  &trans  &trans
            >;

            label = "num";
        };
    };
};
